//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/NewFlierController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewFlierController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewFlierController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewFlierController"",
    ""maps"": [
        {
            ""name"": ""FlierControls"",
            ""id"": ""179dc0b7-ce5e-4e00-9ada-e85f3649ab89"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""dbc35258-9fd3-48a7-950f-337959c35692"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""713b5e24-d442-4821-8b7d-01623fc772f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""63c6e6d0-d440-428a-a776-2799d7546213"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""5e9161be-d542-4083-962b-b3839592d406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""74df8097-d6b5-4bcf-84e6-b84ccbfa7f5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f98e072e-d661-48b9-b78d-38f505e4128a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""d86f36cb-76aa-45d9-b5a5-b9aa4f93c1ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3dcc4b7-773c-4447-a845-6aefe8a6976a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9df8578-56ab-42fc-9b71-efaf6aa0969f"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ebc06af-7957-4080-9260-11d991fd20b7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74b333dc-5d50-4fce-9524-aa2a53b5a935"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae27a036-a80e-4f2a-bc46-8b65945df9e7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e81349b1-4ead-4c16-8fee-ff039e53150e"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1440685-9480-4112-9a61-e43fe833cd4e"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dbbfb37-6eab-4d9f-8e85-588368cc2acf"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlierControls
        m_FlierControls = asset.FindActionMap("FlierControls", throwIfNotFound: true);
        m_FlierControls_Shoot = m_FlierControls.FindAction("Shoot", throwIfNotFound: true);
        m_FlierControls_Move = m_FlierControls.FindAction("Move", throwIfNotFound: true);
        m_FlierControls_Look = m_FlierControls.FindAction("Look", throwIfNotFound: true);
        m_FlierControls_MoveUp = m_FlierControls.FindAction("MoveUp", throwIfNotFound: true);
        m_FlierControls_MoveDown = m_FlierControls.FindAction("MoveDown", throwIfNotFound: true);
        m_FlierControls_MoveLeft = m_FlierControls.FindAction("MoveLeft", throwIfNotFound: true);
        m_FlierControls_MoveRight = m_FlierControls.FindAction("MoveRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlierControls
    private readonly InputActionMap m_FlierControls;
    private IFlierControlsActions m_FlierControlsActionsCallbackInterface;
    private readonly InputAction m_FlierControls_Shoot;
    private readonly InputAction m_FlierControls_Move;
    private readonly InputAction m_FlierControls_Look;
    private readonly InputAction m_FlierControls_MoveUp;
    private readonly InputAction m_FlierControls_MoveDown;
    private readonly InputAction m_FlierControls_MoveLeft;
    private readonly InputAction m_FlierControls_MoveRight;
    public struct FlierControlsActions
    {
        private @NewFlierController m_Wrapper;
        public FlierControlsActions(@NewFlierController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_FlierControls_Shoot;
        public InputAction @Move => m_Wrapper.m_FlierControls_Move;
        public InputAction @Look => m_Wrapper.m_FlierControls_Look;
        public InputAction @MoveUp => m_Wrapper.m_FlierControls_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_FlierControls_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_FlierControls_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_FlierControls_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_FlierControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlierControlsActions set) { return set.Get(); }
        public void SetCallbacks(IFlierControlsActions instance)
        {
            if (m_Wrapper.m_FlierControlsActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnShoot;
                @Move.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnLook;
                @MoveUp.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveDown;
                @MoveLeft.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveLeft;
                @MoveRight.started -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_FlierControlsActionsCallbackInterface.OnMoveRight;
            }
            m_Wrapper.m_FlierControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
            }
        }
    }
    public FlierControlsActions @FlierControls => new FlierControlsActions(this);
    public interface IFlierControlsActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
}
